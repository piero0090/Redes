package Dijkstra;
import java.io.*;
import java.util.*;

public class DJK {

// Definimos las variables de clase a utilizar
int [][] matrizAdy;
int nNodos;
List conj_S=new ArrayList();
List conjComp_S=new ArrayList();
List caminos =new ArrayList();
String tmp;
InputStreamReader p1;
BufferedReader p2;

public void AlgoDijkstra(int numNodos)
{
    matrizAdy = new int[numNodos][numNodos];
    int aux=0;
    p1 = new InputStreamReader(System.in);
    p2 = new BufferedReader(p1);
    nNodos=numNodos;
   
    Teclado(); //Funcion de ingreso de datos
    
    long startTime = System.currentTimeMillis();
    
    do{
      try{
        System.out.println(" * ROUTER ORIGEN: ");
        aux=((int)((p2.readLine()).toUpperCase()).charAt(0))-65;
      }
      catch(IOException e2){
        System.out.println("ERROR: "+e2);
        aux=-1;
      }
      catch(StringIndexOutOfBoundsException e3){
        System.out.println("ERROR: "+e3);
        aux=-1;
      }
    }while(aux<0 || aux>nNodos-1);
    matrizAdy[aux][aux]=0;
    resuelve(aux);
    
    long endTime = System.currentTimeMillis();
    System.out.println("\nEL PROCESO TOMÓ " + (endTime - startTime) + " MILISEGUNDOS");
}

private void Teclado() // Función que permite el ingreso de las distnacias entre un nodo y 
{
    boolean ocurrioError;
    System.out.println(" * INGRESAR LOS DATOS SOLICITADOS: ");
    for(int cuenta=1;cuenta<=nNodos;cuenta++)
      for(int cnt=1;cnt<=nNodos;cnt++){
        if(cnt!=cuenta){
          System.out.println("DISTANCIA DEL ROUTER "+(char)(cuenta+64)+" AL ROUTER "+(char)(cnt+64));
          System.out.println("(INGRESAR 0 SI NO EXISTE) ");
          ocurrioError=false;
          try{
            matrizAdy[cuenta-1][cnt-1]=Integer.valueOf(p2.readLine()).intValue();
            ocurrioError=(matrizAdy[cuenta-1][cnt-1]<0?true:false);
            matrizAdy[cuenta-1][cnt-1]=(matrizAdy[cuenta-1][cnt-1]==0?-1:matrizAdy[cuenta-1][cnt-1]);
          } //Manejo de errores
          catch(IOException e0){
            System.out.println("ERROR: "+e0);
            ocurrioError=true;
          }
          catch(NumberFormatException e){
            System.out.println("ERROR: "+e);
            ocurrioError=true;
          }
          if(ocurrioError)
            cnt--;
        }
        else
          matrizAdy[cuenta-1][cuenta-1]=-1;
      }
}

private void resuelve(int origen) //Función encargada de almacenar las distancias impuestas por el usuario
{
    int nod,minimo,aux,nodCambio=0,intento;
    String tmp2;
    
    for(int i=0;i<nNodos;i++){
      if(i!=origen)
        conjComp_S.add(""+i);
      else
        conj_S.add(""+i);
      caminos.add("");
    }

    for(int i=0;i<nNodos;i++){
      minimo=-1;
      for(int j=0;j<conjComp_S.size();j++){
        nod=Integer.valueOf((String)(conjComp_S.get(j))).intValue();
        aux=min(nod);
        if(minimo==-1 || (aux<minimo && aux!=-1)){
          minimo=aux;
          nodCambio=j;
        }
      }
      if(minimo!=-1){
        conj_S.add(""+(String)(conjComp_S.get(nodCambio)));
        conjComp_S.remove(nodCambio);
      }
    }
    
    //Impresión de resultados
    System.out.print("\n -> RESULTADOS DEL ALGORITMO <-");
    for(int k=0;k<caminos.size();k++)
      if(k!=origen){
        tmp=(String)(caminos.get(k))+(char)(k+65);
        caminos.set(k,tmp);
      }
    for(int j=0;j<caminos.size();j++)
      if(j!=origen){
        intento=0;
        tmp=(String)(caminos.get(j));
          while(tmp.charAt(0)!=(char)(origen+65) && intento<10){
            aux=tmp.charAt(0)-65;
            tmp=((String)(caminos.get(aux)))+tmp.substring(1,tmp.length());
            if(++intento==10)
              tmp="*"+tmp;
          };
        imprimeRuta(tmp,j,origen);
      }
}

private int min(int dest) //Función que calcula la distancia mínima de un nodo a otro
{
    int min=-1;
    int nod=0;
    int nodOrig=-1;
    int aux;
    for(int i=0;i<conj_S.size();i++){
      nod=Integer.valueOf((String)(conj_S.get(i))).intValue();
      if(matrizAdy[nod][nod]!=-1 && matrizAdy[nod][dest]!=-1)
        aux=matrizAdy[nod][nod]+matrizAdy[nod][dest];
      else
        aux=-1;
      if((aux<min && aux!=-1)||min==-1){
        min=aux;
        nodOrig=nod;
      }
    }
    if(min!=-1){
      matrizAdy[dest][dest]=min;
      caminos.set(dest,""+(char)(nodOrig+65));
    }
    return min;
   
}

private void imprimeRuta(String cam,int nod, int o) 
{                                                  
    //Función que imprime la ruta que 
    //tomará el nodo origen asignado por el usuario
      System.out.print("\nRUTAS: ");
    if(cam.charAt(0)=='*')
      System.out.print("NO HAY RUTA DE: "+(char)(o+65)+" A: "+cam.charAt(cam.length()-1));
    else{
      for(int i=0;i<cam.length();i++)
        System.out.print(""+cam.charAt(i)+(i==cam.length()-1?"":"->"));
        System.out.print(" DISTANCIA: "+matrizAdy[nod][nod]);
    }  
} 

}



package Dijkstra;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class prueba {

   public static void main(String[] args) {
       
      
    int num=0;
    DJK ob=new DJK();
    System.out.println("\n\tALGORITMO DE ESTADO ENLACE");
    System.out.println("NUMERO DE NODOS DE LA TOPOLOGÍA: ");

    // A continuación se le pedirá al usuario que ingrese el número de nodos
    //y el código siguiente verificará que el número ingresado sea correcto
    do{
      try{
        InputStreamReader l1 = new InputStreamReader(System.in);
        BufferedReader l2 = new BufferedReader(l1);
        num=Integer.valueOf(l2.readLine()).intValue();
      }
      catch(IOException e){
        System.out.println("Error: "+e);
        System.out.println("Ingresa el numero de nodos que tiene el grafo a resolver: ");
      }
      catch(NumberFormatException e2){
        System.out.println("Error: "+e2);
        System.out.println("Ingresa el numero de nodos que tiene el grafo a resolver: ");
      }
      if(num<3 || num>26)
       System.out.print(" * El numero de nodos debe estar entre 3 y 26 ");

    }while(num<3 || num>26);
    ob.AlgoDijkstra(num);

    }
}
